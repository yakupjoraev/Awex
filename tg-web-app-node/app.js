require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const express = require("express");
const cors = require("cors");
const axios = require("axios");

const bot = new TelegramBot("6007178023:AAELLLKz1U_rtZKQULfM1cTL9msOibFM_wA", {
  //6119167331:AAGzhg57baM-7F_5DPYBEvQBWC5yG7IdxUU
  polling: true,
});

const app = express();

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === "/start") {
    try {
      await bot.sendMessage(
        chatId,
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ B2B Awex Bot ü§ñ

_–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –í–æ–π—Ç–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ —Å–≤–æ–π Awex –∞–∫–∫–∞—É–Ω—Ç._`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–í–æ–π—Ç–∏",
                  callback_data: "login",
                },
              ],
            ],
          },
          parse_mode: "Markdown",
        }
      );
    } catch (err) {
      console.log(err);
    }
  }
});

bot.on("callback_query", async (ctx) => {
  console.log(ctx);
  const chatId = ctx.message.chat.id;
  const data = ctx.data;

  if (data === "login") {
    try {
      await bot.sendMessage(
        chatId,
        `–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
*login:password*`,
        {
          parse_mode: "Markdown",
        }
      );
    } catch (err) {
      console.log(err);
    }
  }
});

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text.includes(":")) {
    const [login, password] = text.split(":");

    try {
      const response = await axios.post(
        "https://awex.freeblock.site/api/0.0.1/account/auth/sign-in",
        {
          email: login,
          password,
        }
      );

      const { token } = response.data;

      const userResponse = await axios.get(
        "https://awex.freeblock.site/api/0.0.1/account/auth/user"
      );

      console.log(token);

      await bot.sendMessage(chatId, `–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å ‚úÖ`, {
        parse_mode: "Markdown",
      });
    } catch (err) {
      console.log(err.response.data.errors);
      await bot.sendMessage(
        chatId,
        `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚ùå
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.`,
        {
          parse_mode: "Markdown",
        }
      );
    }
  }
});

app.use(express.json());
app.use(
  cors({
    origin: "*",
  })
);

async function checkPaymentStatus(channelId, uniqueId, intervalId) {
  try {
    const response = await axios.get(
      `https://awex.freeblock.site/api/0.0.1/order/payment/${uniqueId}`
    );
    const paymentStatus = response.data.paid;

    if (paymentStatus) {
      bot.sendMessage(
        channelId,
        `*–°—á–µ—Ç ‚Ññ${uniqueId}* —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω ‚úÖ
*–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ —Ç–æ–≤–∞—Ä–∞:* ${response.data.name}
*–°—É–º–º–∞:* ${
          response?.data?.amount
        } ${response?.data?.paymentData?.currency?.toUpperCase()}

_‚ùóÔ∏è–ü—Ä–µ–∂–Ω—è—è —Å—Å—ã–ª–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞._
      `,
        {
          parse_mode: "Markdown",
        }
      );
      clearInterval(intervalId);
    }

    if (response?.data?.expired) {
      bot.sendMessage(
        channelId,
        `–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—á–µ—Ç–∞ *‚Ññ${uniqueId}* –∏—Å—Ç–µ–∫ ‚ùå

_‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã—Å—Ç–∞–≤—å—Ç–µ —Å—á–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ._
        `,
        {
          parse_mode: "Markdown",
        }
      );
      clearInterval(intervalId);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã:", error.message);
  }
}

app.post("/order-tracking", (req, res) => {
  const { chatId, uniqueId } = req.body;
  const interval = 2 * 61 * 1000;

  const intervalId = setInterval(() => {
    checkPaymentStatus(chatId, uniqueId, intervalId);
  }, interval);

  res.send("ok");
});

app.listen(3000, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É 3000`);
});
